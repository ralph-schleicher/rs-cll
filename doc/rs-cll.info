This is rs-cll.info, produced by makeinfo version 5.1 from rs-cll.texi.

This is edition 1 (draft), last updated 2013-10-08, of 'Ralph's Common
Lisp Library Reference Manual', for RS-CLL version 20131008.0250.

     Copyright (C) 2013 Ralph Schleicher

     Permission is granted to make and distribute verbatim copies of
     this manual, provided the copyright notice and this permission
     notice are preserved on all copies.

Please report any errors in this manual to <rs@ralph-schleicher.de>.
INFO-DIR-SECTION Libraries
START-INFO-DIR-ENTRY
* RS-CLL: (rs-cll).             Ralph's Common Lisp library.
END-INFO-DIR-ENTRY


File: rs-cll.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

RS-CLL
******

This is edition 1 (draft), last updated 2013-10-08, of 'Ralph's Common
Lisp Library Reference Manual', for RS-CLL version 20131008.0250.

     Copyright (C) 2013 Ralph Schleicher

     Permission is granted to make and distribute verbatim copies of
     this manual, provided the copyright notice and this permission
     notice are preserved on all copies.

Please report any errors in this manual to <rs@ralph-schleicher.de>.

* Menu:

* Introduction::
* Basic Definitions::
* Mathematics::
* Miscellaneous::
* Programming for the Real World::
* Symbol Index::
* Concept Index::


File: rs-cll.info,  Node: Introduction,  Next: Basic Definitions,  Prev: Top,  Up: Top

1 Introduction
**************

Ralph's Common Lisp Library, RS-CLL for short, is a collection of
routines for programming in Common Lisp.


File: rs-cll.info,  Node: Basic Definitions,  Next: Mathematics,  Prev: Introduction,  Up: Top

2 Basic Definitions
*******************

* Menu:

* Data::
* Types::
* Conditions::
* Symbols::
* Numbers::
* Quantities::
* Characters::
* Arrays::
* Strings::
* Sequences::
* Streams::
* Reader::


File: rs-cll.info,  Node: Data,  Next: Types,  Prev: Basic Definitions,  Up: Basic Definitions

2.1 Data
========

 -- Macro: defconst name value &optional doc
     Define a constant variable.

     This is like 'defconstant' except that the initially set value is
     reused when the 'defconst' form is evaluated again.

 -- Macro: defsubst name arg-list &body body
     Define an inline function.

     This is like 'defun' except that the function is globally marked
     for inline expansion by the compiler.

 -- Function: false &rest arguments
     Ignore all arguments and return nil.

 -- Function: true &rest arguments
     Ignore all arguments and return t.

 -- Function: nothing &rest arguments
     Ignore all arguments and return no values.


File: rs-cll.info,  Node: Types,  Next: Conditions,  Prev: Data,  Up: Basic Definitions

2.2 Types
=========

 -- Function: list-of-strings-p object
     Return true if OBJECT is a list of strings.

     If OBJECT is the empty list, value is true, too.

 -- Type: list-of-strings
     Type specifier for a list of strings.


File: rs-cll.info,  Node: Conditions,  Next: Symbols,  Prev: Types,  Up: Basic Definitions

2.3 Conditions
==============

 -- Function: ensure-type object type
     Signal a 'type-error' if OBJECT is not of the type TYPE.
     Otherwise, return OBJECT.


File: rs-cll.info,  Node: Symbols,  Next: Numbers,  Prev: Conditions,  Up: Basic Definitions

2.4 Symbols
===========

 -- Function: symbol-name* symbol
     Return the name of SYMBOL including the package prefix.

     If SYMBOL does not belong to a package, just return it's name.  If
     SYMBOL is a keyword, add a leading colon character to the name.  If
     SYMBOL is an external symbol of a package, seperate the package
     name and the symbol name by a colon character.  Otherwise, seperate
     the package name and the symbol name by two colon characters.


File: rs-cll.info,  Node: Numbers,  Next: Quantities,  Prev: Symbols,  Up: Basic Definitions

2.5 Numbers
===========

* Menu:

* Numerical Constants::
* Mathematical Operators::
* Floating-Point Numbers::
* Sorting Numbers::
* Number Systems::


File: rs-cll.info,  Node: Numerical Constants,  Next: Mathematical Operators,  Prev: Numbers,  Up: Numbers

2.5.1 Numerical Constants
-------------------------

 -- Constant: pi/6
     One sixth of the ratio of a circle's circumference to its diameter.
     This is equal to 30 arc degree.

 -- Constant: pi/4
     One quarter of the ratio of a circle's circumference to its
     diameter.  This is equal to 45 arc degree.

 -- Constant: pi/2
     One half of the ratio of a circle's circumference to its diameter.
     This is equal to 90 arc degree.

 -- Constant: 2*pi
     Two times the ratio of a circle's circumference to its diameter.
     This is equal to 360 arc degree.


File: rs-cll.info,  Node: Mathematical Operators,  Next: Floating-Point Numbers,  Prev: Numerical Constants,  Up: Numbers

2.5.2 Mathematical Operators
----------------------------

Minimum and Maximum
...................

 -- Macro: minf place &rest numbers
     Set the value designated by PLACE to the minimum of the current
     value and NUMBERS.

 -- Macro: maxf place &rest numbers
     Set the value designated by PLACE to the maximum of the current
     value and NUMBERS.

Basic Arithmetics
.................

 -- Macro: addf place &rest numbers
     Add NUMBERS to the value designated by PLACE.

 -- Macro: subf place &rest numbers
     Subtract NUMBERS to the value designated by PLACE.  If NUMBERS is
     omitted, change the sign of the value.

 -- Macro: mulf place &rest numbers
     Multiply the value designated by PLACE by NUMBERS.

 -- Macro: divf place &rest numbers
     Divide the value designated by PLACE by NUMBERS.  If NUMBERS is
     omitted, invert the value.

Combined Arithmetics
....................

 -- Function: fma number multiplicand summand
     Multiply NUMBER by MULTIPLICAND, then add SUMMAND.  Attempt to
     perform a fused multiply-add operation.

     This is the inverse of the 'fsd' function.

 -- Function: fsd number subtrahend divisor
     Subtract SUBTRAHEND from NUMBER, then divide by DIVISOR.  Attempt
     to perform a fused subtract-divide operation.

     This is the inverse of the 'fma' function.

 -- Macro: fmaf place multiplicand summand
     Multiply the value designated by PLACE by MULTIPLICAND, then add
     SUMMAND.  Attempt to perform a fused multiply-add operation.

 -- Macro: fsdf place subtrahend divisor
     Subtract SUBTRAHEND from the value designated by PLACE, then divide
     by DIVISOR.  Attempt to perform a fused subtract-divide operation.


File: rs-cll.info,  Node: Floating-Point Numbers,  Next: Sorting Numbers,  Prev: Mathematical Operators,  Up: Numbers

2.5.3 Floating-Point Numbers
----------------------------

 -- Function: float-epsilon &optional float
     Return the smallest positive floating-point number used in the
     representation of FLOAT, such that the expression

          (= (float 1 EPSILON) (+ (float 1 EPSILON) EPSILON))

     is false.

 -- Function: float-negative-epsilon &optional float
     Return the smallest positive floating-point number used in the
     representation of FLOAT, such that the expression

          (= (float 1 EPSILON) (- (float 1 EPSILON) EPSILON))

     is false.

 -- Function: float-digits* float &optional base
     Return the number of digits used in the representation of FLOAT.
     This includes any implicit digits.

     Optional argument BASE is the radix for the return value.  Default
     is 10.

     If BASE is equal to the radix of FLOAT, value is an integral
     number.  Otherwise, value is a floating-point number in the format
     of FLOAT.

 -- Function: float-precision* float &optional base
     Return the number of significant digits present in FLOAT.

     Optional argument BASE is the radix for the return value.  Default
     is 10.

     If BASE is equal to the radix of FLOAT, value is an integral
     number.  Otherwise, value is a floating-point number in the format
     of FLOAT.  If FLOAT is zero, value is zero.

 -- Function: decimal-digits float
     Return the number of decimal digits needed to preserve the original
     floating-point number when converting it to a decimal character
     format.


File: rs-cll.info,  Node: Sorting Numbers,  Next: Number Systems,  Prev: Floating-Point Numbers,  Up: Numbers

2.5.4 Sorting Numbers
---------------------

 -- Function: absolute-ascending a b
     Return true if the absolute value of number A is less than the
     absolute value of number B.  This function can be used to sort
     numbers in ascending order.

 -- Function: absolute-descending a b
     Return true if the absolute value of number A is greater than the
     absolute value of number B.  This function can be used to sort
     numbers in descending order.


File: rs-cll.info,  Node: Number Systems,  Prev: Sorting Numbers,  Up: Numbers

2.5.5 Number Systems
--------------------

 -- Function: roman-numeral n
     Convert the integral number N into a roman number (a string).  If N
     is zero, the return value is nil.  If N is a negative number,
     utilize lowercase letters.  Otherwise, use uppercase letters.


File: rs-cll.info,  Node: Quantities,  Next: Characters,  Prev: Numbers,  Up: Basic Definitions

2.6 Quantities
==============

 -- Function: radian-from-degree deg
     Convert a plane angle from degree to radian.

        * Argument DEG is the angle given in degree.

     Value is the corresponding angle given in radian.

 -- Function: degree-from-radian rad
     Convert a plane angle from radian to degree.

        * Argument RAD is the angle given in radian.

     Value is the corresponding angle given in degree.

 -- Function: degree-from-sexagesimal deg &optional min s sign
     Join sexagesimal subdivisions of an arc degree into a plane angle.

        * First argument DEG is the number of arc degrees.

        * Optional second argument MIN is the number of arc minutes.

        * Optional third argument S is the number of arc seconds.

        * Optional fourth argument SIGN specifies the sign.

     Arguments DEG, MIN, and S have to be non-negative numbers.

     Value is the corresponding angle given in degree.  If none of the
     arguments is a floating-point number, value is a rational number.

 -- Function: sexagesimal-from-degree angle
     Split a plane angle into sexagesimal subdivisions of an arc degree.

        * Argument ANGLE is the angle given in degree.

     Return values are the arc degrees, arc minutes, and arc seconds.
     The number of arc seconds may be a floating point number with
     fractions of a second.  Fourth value is either plus one or minus
     one specifying the sign of the angle.


File: rs-cll.info,  Node: Characters,  Next: Arrays,  Prev: Quantities,  Up: Basic Definitions

2.7 Characters
==============

 -- Function: whitespace-char-p char
     Return true if CHAR is a whitespace character.

     Argument CHAR has to be a character object.

 -- Function: blank-char-p char
     Return true if CHAR is a space or horizontal tab character.

     Argument CHAR has to be a character object.

 -- Function: standard-alpha-char-p char
     Return true if CHAR is a standard alphabetic character.

     Argument CHAR has to be a character object.

 -- Function: standard-digit-char-p char
     Return true if CHAR is a standard digit character.

        * First argument CHAR has to be a character object.

        * Optional second argument RADIX is an integer between 2 and 36,
          inclusive.  Default is 10.

     Value is the weight of CHAR as an integer, or nil.


File: rs-cll.info,  Node: Arrays,  Next: Strings,  Prev: Characters,  Up: Basic Definitions

2.8 Arrays
==========

 -- Function: linear-index-from-subscripts dimensions subscripts
     Return the linear index corresponding to a set of subscript values.

        * First argument DIMENSIONS is a list of valid array dimensions.

        * Second argument SUBSCRIPTS is a list of valid array indices.

     The return value of the 'linear-index-from-subscripts' function is
     equal to the value of the form

          (apply #'array-row-major-index (make-array DIMENSIONS) SUBSCRIPTS)

 -- Function: subscripts-from-linear-index dimensions index
     Return the set of subscript values corresponding to a linear index.

        * First argument DIMENSIONS is a list of valid array dimensions.

        * Second argument INDEX is a valid array index.

     This is the inverse function of 'linear-index-from-subscripts'.


File: rs-cll.info,  Node: Strings,  Next: Sequences,  Prev: Arrays,  Up: Basic Definitions

2.9 Strings
===========

 -- Parameter: *random-string-alphabet*
     The character set for generating random strings.  Value has to be a
     vector.

 -- Function: random-string n
     Return a string with N random characters.


File: rs-cll.info,  Node: Sequences,  Next: Streams,  Prev: Strings,  Up: Basic Definitions

2.10 Sequences
==============

 -- Function: start-index-if predicate seq &key start end key
     Return start index of first element in SEQ matching PREDICATE.

        * Keywords START and END are bounding index designators.

        * Keyword KEY is a function designator of one argument.

     If no element matches PREDICATE, return the end index position.
     Likewise if SEQ is empty.

 -- Function: start-index-if-not predicate seq &key start end key
     Return start index of first element in SEQ not matching PREDICATE.

        * Keywords START and END are bounding index designators.

        * Keyword KEY is a function designator of one argument.

     If all elements match PREDICATE, return the end index position.
     Likewise if SEQ is empty.

 -- Function: end-index-if predicate seq &key start end key
     Return end index of last element in SEQ matching PREDICATE.

        * Keywords START and END are bounding index designators.

        * Keyword KEY is a function designator of one argument.

     If no element matches PREDICATE, return the start index position.
     Likewise if SEQ is empty.

 -- Function: end-index-if-not predicate seq &key start end key
     Return end index of last element in SEQ not matching PREDICATE.

        * Keywords START and END are bounding index designators.

        * Keyword KEY is a function designator of one argument.

     If all elements match PREDICATE, return the start index position.
     Likewise if SEQ is empty.

 -- Function: bounding-indices-if predicate seq &key start end key
     Return start index of first element in SEQ and end index of last
     element in SEQ matching PREDICATE.

        * Keywords START and END are bounding index designators.

        * Keyword KEY is a function designator of one argument.

     If no element matches PREDICATE, return the end index positions.
     Likewise if SEQ is empty.

 -- Function: bounding-indices-if-not predicate seq &key start end key
     Return start index of first element in SEQ and end index of last
     element in SEQ not matching PREDICATE.

        * Keywords START and END are bounding index designators.

        * Keyword KEY is a function designator of one argument.

     If all elements match PREDICATE, return the end index positions.
     Likewise if SEQ is empty.


File: rs-cll.info,  Node: Streams,  Next: Reader,  Prev: Sequences,  Up: Basic Definitions

2.11 Streams
============

 -- Function: read-file &optional input-stream element-length
     Read all elements from a stream.

        * Optional first argument INPUT-STREAM has to be an open input
          stream.  The default is standard input.

        * Optional second argument ELEMENT-LENGTH is the size of an
          element in the external format given in byte.  This argument
          has no effect for binary streams.

     If the element type of the stream is a character, value is a
     string.  Otherwise, value is a vector.

     The ELEMENT-LENGTH argument may be used to speed up reading from
     the stream by allocating the resulting sequence all at once.  This
     only works if the file size of the stream can be determined, too.
     If the external format has a variable length element size like, for
     example, the UTF-8 character encoding, then ELEMENT-LENGTH should
     be the minimum length of an element.  In such a case, more memory
     than actually needed may be allocated for the return value.

     Reading a text file:

          (with-open-file (s ... :direction :input)
            (read-file s))

          (with-open-file (s ... :direction :input :external-format :UTF-8)
            (read-file s 1))

          (with-open-file (s ... :direction :input :external-format :UCS-2BE)
            (read-file s 2))

     Reading a binary file:

          (with-open-file (s ... :direction :input :element-type '(unsigned-byte 8))
            (read-file s))"


File: rs-cll.info,  Node: Reader,  Prev: Streams,  Up: Basic Definitions

2.12 Reader
===========

 -- Function: q-reader stream sub-char arg
     Read a quoted text.

     First character is the delimiting character.  Non-bracketing
     delimiters use the same character fore and aft.  Round brackets,
     angle brackets, square brackets, and curly brackets always match
     the other character of the pair.

     Without prefix argument, bracketing delimiters nest.  If prefix
     argument is zero, bracketing delimiters use the same character fore
     and aft, that means they are treated like a non-bracketing
     delimiting character.  If prefix argument is a postive number,
     bracketing delimiters do not nest, that means the first matching
     other character of the pair terminates reading.

     You can enable this feature by evaluating the form

          (set-dispatch-macro-character #\# #\q #'q-reader)

     After that, you can read literal strings via

          #q|He said "Quote me!"|

     or

          #q<<tag attr="val">text</tag>>

     but

          #q(")")

     will fail, because the 'q-reader' function is not a parser for any
     particular grammar.


File: rs-cll.info,  Node: Mathematics,  Next: Miscellaneous,  Prev: Basic Definitions,  Up: Top

3 Mathematics
*************

* Menu:

* Trigonometric Functions::
* Exponential Functions::
* Optimization::
* Polynomials::


File: rs-cll.info,  Node: Trigonometric Functions,  Next: Exponential Functions,  Prev: Mathematics,  Up: Mathematics

3.1 Trigonometric Functions
===========================

 -- Function: hypot x y
     Return the distance between a point and the origin in a
     two-dimensional Cartesian coordinate system.

     Arguments X and Y have to be real numbers.

 -- Function: hypot3 x y z
     Return the distance between a point and the origin in a
     three-dimensional Cartesian coordinate system.

     Arguments X, Y, and Z have to be real numbers.


File: rs-cll.info,  Node: Exponential Functions,  Next: Optimization,  Prev: Trigonometric Functions,  Up: Mathematics

3.2 Exponential Functions
=========================

 -- Function: cbrt number
     Return the cube root of NUMBER.

     If NUMBER is a real number, value is the real cube root of NUMBER.

 -- Function: square number
     Return NUMBER squared, that is NUMBER raised to the power two.

     Argument NUMBER has to be a number.

 -- Function: square-root number
     Return the square root of NUMBER.

     Argument NUMBER has to be a number.

     The 'square-root' function attempts to propagate the type of the
     argument NUMBER to its value.

 -- Function: cube number
     Return NUMBER cubed, that is NUMBER raised to the power three.

     Argument NUMBER has to be a number.

 -- Function: cube-root number
     Return the cube root of NUMBER.

     Argument NUMBER has to be a number.

     If argument NUMBER is zero, value is zero.  If argument NUMBER is a
     real number, value is the real cube root of NUMBER.

     The 'cube-root' function attempts to propagate the type of the
     argument NUMBER to its value.


File: rs-cll.info,  Node: Optimization,  Next: Polynomials,  Prev: Exponential Functions,  Up: Mathematics

3.3 Optimization
================

 -- Function: brent f &key y initial-value lower-bound upper-bound
          max-iter rel-tol abs-tol
     Solve univariate function y = f(x) using Brent's method.

        * First argument F is a function taking one numeric argument.
          Return value of F has to be a real number.

        * Keyword argument Y is the function value.  Default is zero.

        * Keyword argument INITIAL-VALUE is the initial value for the
          function argument X.

        * Keyword arguments LOWER-BOUND and UPPER-BOUND specify the
          interval bounds between which the root is searched.  If any
          one of these two arguments is omitted, the interval bounds are
          determined automatically around INITIAL-VALUE.

        * Keyword argument MAX-ITER is the maximum number of iterations
          to be performed.  Default is 1000.

        * Keyword argument REL-TOL is the relative tolerance.  Default
          is machine precision.

        * Keyword argument ABS-TOL is the absolute tolerance.  Default
          is zero.

     The iteration stops if half of the interval is less than or equal
     to 2 REL-TOL |x| + ABS-TOL / 2.

     Primary value is the argument X for which y = f(x) is true.
     Secondary value is the number of iterations performed; nil means
     that the algorithm did not converge within the given number of
     iterations.


File: rs-cll.info,  Node: Polynomials,  Prev: Optimization,  Up: Mathematics

3.4 Polynomials
===============

 -- Function: evaluate-polynomial coefficients number
     Evaluate a polynomial.

        * First argument COEFFICIENTS is a sequence whose elements are
          the coefficients of the polynomial in descending order.

        * Second argument NUMBER is the argument at which the polynomial
          is evaluated.

 -- Function: quadratic-formula-1 p q
     Calculate the roots of a monic quadratic function

          f(x) = x^2 + p x + q

     Arguments P and Q are the coefficients of the polynomial.

     Value is a list of two numbers.

 -- Function: quadratic-formula a b c
     Calculate the roots of a general quadratic function

          f(x) = a x^2 + b x + c

     Arguments A, B, and C are the coefficients of the polynomial.

     Value is a list of two numbers.

 -- Function: cubic-formula-1 p q r
     Calculate the roots of a monic cubic function

          f(x) = x^3 + p x^2 + q x + r

     Arguments P, Q, and R are the coefficients of the polynomial.

     Value is a list of three numbers.  The first element is a real
     number.

 -- Function: cubic-formula a b c d
     Calculate the roots of a general cubic function

          f(x) = a x^3 + b x^2 + c x + d

     Arguments A, B, C, and D are the coefficients of the polynomial.

     Value is a list of three numbers.


File: rs-cll.info,  Node: Miscellaneous,  Next: Programming for the Real World,  Prev: Mathematics,  Up: Top

4 Miscellaneous
***************

* Menu:

* Regular Expressions::


File: rs-cll.info,  Node: Regular Expressions,  Prev: Miscellaneous,  Up: Miscellaneous

4.1 Regular Expressions
=======================

The symbols documented in this section are an extension to the CL-PPCRE
package.  It provides caching of compiled regular expressions and some
syntactic sugar for working with the match data.

 -- Function: string-match regexp string &key start end
     Return start position of first match for REGEXP in STRING, or nil
     if there is no match.

        * First argument REGEXP is a regular expression.

        * Second argument STRING is the target string.

        * Keyword arguments START and END are bounding indices in
          STRING.  Default values are zero and the length of STRING.

     See the 'cl-ppcre:scan' function, for more details.

 -- Function: match-start &optional subexp
     Return start index of text matched by last search.

     Optional argument SUBEXP (a non-negative integer) specifies a
     parenthesized expression.  A value of zero means the entire match.
     This is the default.

     Value is nil if there is no match.

 -- Function: match-end &optional subexp
     Return end index of text matched by last search.

     Optional argument SUBEXP (a non-negative integer) specifies a
     parenthesized expression.  A value of zero means the entire match.
     This is the default.

     Value is nil if there was no match.

 -- Function: match-data
     Return list of bounding indices on what the last search matched.

 -- Macro: save-match-data &body body
     Save match data, execute BODY forms, restore match data.

     Value is the value of the last form in BODY.

 -- Function: match-string &optional subexp
     Return string of text matched by last search.

     Optional argument SUBEXP (a non-negative integer) specifies a
     parenthesized expression.  A value of zero means the entire match.
     This is the default.

     Value is nil if there is no match.

 -- Function: match-strings
     Return strings of text matched by last search.

     Value is a list.  A list element of nil means that the
     corresponding parenthesized expression did not match.

 -- Function: replace-match new-text &optional subexp
     Replace text matched by last search.

     Optional argument SUBEXP (a non-negative integer) specifies a
     parenthesized expression.  A value of zero means the entire match.
     This is the default.


File: rs-cll.info,  Node: Programming for the Real World,  Next: Symbol Index,  Prev: Miscellaneous,  Up: Top

5 Programming for the Real World
********************************

This chapter documents features for interfacing with the operating
system.  While these are especially useful when creating standalone
applications, they are also highly non-portable.

* Menu:

* Environment Variables::
* Program Arguments::
* Program Termination::
* Diagnostic Messages::
* Working Directory::
* Temporary Files and Directories::
* External Programs::


File: rs-cll.info,  Node: Environment Variables,  Next: Program Arguments,  Prev: Programming for the Real World,  Up: Programming for the Real World

5.1 Environment Variables
=========================

 -- Function: environment-variables
     Return all environment variables as an associated list.  List
     elements are cons cells of the form

          (NAME . VALUE)

     where NAME and VALUE are the name respective value of an
     environment variable.

 -- Function: environment-variable name
     Return the value of the environment variable NAME.

     Value is nil if no entry with key NAME exists.

 -- Function: (setf environment-variable) value name &optional replace
     Set the value of the environment variable NAME to VALUE.

     If the environment already contains an entry with key NAME and
     optional argument REPLACE is true (this is the default), replace
     the entry with key NAME.  Otherwise, do nothing.

     If VALUE is nil, remove the entry with key NAME from the
     environment.


File: rs-cll.info,  Node: Program Arguments,  Next: Program Termination,  Prev: Environment Variables,  Up: Programming for the Real World

5.2 Program Arguments
=====================

 -- Function: program-invocation-name
     Return the program name as invoked on the command line.

     Value is a string.

 -- Function: (setf program-invocation-name) value
     Set the program name.

     Value has to be a string, a pathname, or a file stream.

 -- Function: program-invocation-short-name
     Return the program name as invoked on the command line but without
     the directory part.

     Value is a string.

 -- Function: program-arguments
     Return the list of program arguments.

     Value is a list of strings.

 -- Function: (setf program-arguments) value
     Set the list of program arguments.

     Value has to be a list of strings.


File: rs-cll.info,  Node: Program Termination,  Next: Diagnostic Messages,  Prev: Program Arguments,  Up: Programming for the Real World

5.3 Program Termination
=======================

 -- Function: exit-success
     Terminate the program indicating successful completion.

 -- Function: exit-failure
     Terminate the program indicating a failure condition.


File: rs-cll.info,  Node: Diagnostic Messages,  Next: Working Directory,  Prev: Program Termination,  Up: Programming for the Real World

5.4 Diagnostic Messages
=======================

Standalone programs should write diagnostic messages to standard error.
Diagnostic messages have the form

     PROGRAM-NAME:FILE-NAME:LINE-NUMBER: MESSAGE

where PROGRAM-NAME is the name of the program issuing the diagnostic
message and FILE-NAME and LINE-NUMBER should point to the location of
the error.

 -- Condition: diagnostic-message ('simple-condition')
     Condition type for a diagnostic message.

        * Slot PROGRAM-NAME is the program name.  Default is the value
          returned by the 'program-invocation-short-name' function.  If
          nil, the program name is not part of the message text.

        * Slot FILE-NAME is the file name operated on.  Default nil,
          that means not applicable.

        * Slot LINE-NUMBER is the line number operated on.  Default nil,
          that means not applicable.  Value is only used if FILE-NAME is
          not null.

        * Slot LEVEL is the severity level.  Value is either ':error',
          ':warning', or ':message'.  Default is ':message'.

 -- Function: say datum &rest arguments
     Signal a condition.

     Argument is a condition designator.

     If the condition is not handled, print the condition report to the
     '*error-output*' stream and return the condition object.
     Otherwise, the value is nil.

 -- Function: die datum &rest arguments
     Signal a fatal condition.

     Argument is a condition designator.

     If the condition is not handled, print the condition report to the
     '*error-output*' stream and terminate the program (see function
     *note 'exit-failure': rs:exit-failure.).

You can call 'say' and 'die' in various ways.

     (say (make-condition 'diagnostic-message
                          :file-name FILE-NAME
                          :format-control "no such file"))

This is exactly equal to the form

     (say 'diagnostic-message
          :file-name FILE-NAME
          :format-control "no such file")

The most simple form is by passing the format control string as the
first argument.

     (let ((n 2))
       (when (oddp n)
         (die "should not happen")))

 -- Function: standalone-program-p
     Return true if Lisp is running in batch mode.

 -- Function: standalone-program
     Disable features available in an interactive Lisp.


File: rs-cll.info,  Node: Working Directory,  Next: Temporary Files and Directories,  Prev: Diagnostic Messages,  Up: Programming for the Real World

5.5 Working Directory
=====================

 -- Function: get-working-directory
     Return the process's working directory.

     Value is a pathname.

     Signal a 'file-error' if the directory can not be determined.

 -- Function: set-working-directory directory &optional default
     Set the process's working directory to DIRECTORY.

     Value is the pathname of the new working directory.

        * First argument DIRECTORY is either a string (interpreted as a
          directory file name) or a pathspec.

        * If optional second argument DEFAULT is true, adjust the
          special variable '*default-pathname-defaults*', too.  This is
          the default.

     Signal a 'file-error' if the directory can not be changed.

 -- Macro: with-working-directory (directory &rest arg) &body body
     Temporarily change the process' working directory to DIRECTORY and
     evaluate BODY.


File: rs-cll.info,  Node: Temporary Files and Directories,  Next: External Programs,  Prev: Working Directory,  Up: Programming for the Real World

5.6 Temporary Files and Directories
===================================

 -- Function: temporary-file-name &key prefix directory
     Generate a pathname that may be used for a temporary file.

        * Keyword argument PREFIX is the initial sequence of characters
          for the file name.  Default is '"temp"'.

        * Keyword argument DIRECTORY specifies the directory in which
          the file name is created.  Value is either nil, t, a string,
          or a pathname designator.  A value of nil means to utilize the
          directory part of '*default-pathname-defaults*', t means to
          use some system specific temporary directory, a string is
          interpreted as a directory file name, and a pathname
          designator is used as is.

     Value is a pathname whose file name is PREFIX followed by six
     random characters (see the 'random-string' function).

     When keyword argument DIRECTORY is t, the system specific temporary
     directory is chosen as follows.  First, the environment variables
     'TMPDIR' and 'TMP' are examined in that order.  If both environment
     variables are not set, further processing depends on the type of
     operating system.  On Unix, fall back to the '/tmp' directory.  On
     Windows, check the value of the environment variable 'TEMP', then
     fall back to the 'C:\Temp', directory.

 -- Function: temporary-file &key prefix directory direction
          element-type external-format
     Create a unique file.

        * Keyword arguments PREFIX and DIRECTORY have the same meaning
          as for the 'temporary-file-name' function.

        * Keyword arguments DIRECTION (default ':output'), ELEMENT-TYPE
          (default 'character'), and EXTERNAL-FORMAT (default
          ':default') have the same meaning as for the 'open' function.

     Value is a file stream to the newly created file.

 -- Macro: with-temporary-file (var &rest arg) &body body
     Create a temporary file and evaluate the body forms.

        * First argument VAR is the variable name to which the file
          stream of the temporary file is bound.

        * Remaining arguments are passed on to the 'temporary-file'
          function.

     When control leaves the body, either normally or abnormally, the
     temporary file is automatically closed and deleted.

     Value is the value of the last form of BODY.

 -- Function: temporary-directory &key prefix directory
     Create a unique directory.

        * Keyword arguments PREFIX and DIRECTORY have the same meaning
          as for the 'temporary-file-name' function.

     Value is the pathname to the newly created directory.

 -- Macro: with-temporary-directory (var &rest arg) &body body
     Create a temporary directory and evaluate the body forms.

        * First argument VAR is the variable name to which the pathname
          of the temporary directory is bound.

        * Remaining arguments are passed on to the 'temporary-directory'
          function.

     When control leaves the body, either normally or abnormally, the
     temporary directory is automatically deleted.  This includes all
     files and directories within the temporary directory.

     Value is the value of the last form of BODY.


File: rs-cll.info,  Node: External Programs,  Prev: Temporary Files and Directories,  Up: Programming for the Real World

5.7 External Programs
=====================

 -- Function: execute-program program &optional arguments &key
          extra-arguments input if-input-does-not-exist output
          if-output-exists error if-error-exists wait
     Run an external program.

        * First argument PROGRAM is the program file name.  Value is
          either a string or a pathname.  If PROGRAM is an absolute or
          explicit relative file name, execute the specified file.
          Otherwise, search for it in the standard program search path.

        * Second argument ARGUMENTS are the program arguments.  Value is
          a list of strings.

        * Keyword argument EXTRA-ARGUMENTS are additional program
          arguments.  Value is a list of strings.  These arguments are
          appended to the normal ARGUMENTS in a way similar to the
          'xargs' utility.  Use of this keyword may result in multiple
          invocations of PROGRAM.

        * Keyword argument INPUT is the source for the program's
          standard input stream.  Value is either nil, t, ':stream', a
          string, or a pathname.  Default is t and ':stream' is only
          valid if WAIT is nil.

        * Keyword argument IF-INPUT-DOES-NOT-EXIST specifies what to do
          if INPUT names a non-existing file.  Value is either ':error',
          ':create', or nil.  Default is ':error'.

        * Keyword argument OUTPUT is the destination for the program's
          standard output stream.  Value is either nil, t, ':stream', a
          string, or a pathname.  Default is t and ':stream' is only
          valid if WAIT is nil.

        * Keyword argument IF-OUTPUT-EXISTS specifies what to do if
          OUTPUT names an existing file.  Value is either ':error',
          ':supersede', ':append', or nil.  Default is ':error'.

        * Keyword argument ERROR is the destination for the program's
          standard error stream.  Value is either nil, t, ':stream', a
          string, or a pathname.  Default is t and ':stream' is only
          valid if 'wait' is nil.

        * Keyword argument IF-ERROR-EXISTS specifies what to do if ERROR
          names am existing file.  Value is either ':error',
          ':supersede', ':append', or nil.  Default is ':error'.

        * If keyword argument WAIT is true, block the Lisp process and
          wait for the program to terminate.  Otherwise run the program
          asynchronously.  Default is true.

     If INPUT names a non-existing file and IF-INPUT-DOES-NOT-EXIST is
     nil, value is nil (no error).  Likewise if OUTPUT/ERROR names an
     existing file and IF-OUTPUT-EXISTS/IF-ERROR-EXISTS is nil.
     Otherwise, the return value depends on the WAIT flag.  If WAIT is
     true, value is the program's exit status.  Otherwise, value is an
     object representing the external program.

     For INPUT, OUTPUT, and ERROR, a value of nil means that the stream
     is redirected to the null device, t means to inherit the stream
     from the Lisp process, ':stream' means to create a new stream (only
     valid if 'wait' is nil), and a string or a pathname names a file.

     For IF-INPUT-DOES-NOT-EXIST, a value of ':error' means to signal a
     file error, ':create' means to create the file, and nil means to
     fail silently.

     For IF-OUTPUT-EXISTS and IF-ERROR-EXISTS, a value of ':error' means
     to signal a file error, ':supersede' means to create a new file
     with the same name, ':append' means to modify the existing file at
     the end, and nil means to fail silently.

 -- Macro: with-input-from-program (var program &optional arguments &key
          input if-input-does-not-exist error if-error-exists) &body
          body
     Run an external program asynchronously and evaluate the body forms.

        * First argument VAR is the variable name to which the output
          stream of the external program is bound (see
          'program-output-stream').  The Lisp process can read the
          program's output via this stream.

        * Remaining arguments have the same meaning as for the
          'execute-program' function.

     When control leaves the body, either normally or abnormally, the
     open stream is automatically closed and deleted.

     Value is the value of the last form of BODY.

 -- Macro: with-output-to-program (var program &optional arguments &key
          output if-output-exists error if-error-exists) &body body
     Run an external program asynchronously and evaluate the body forms.

        * First argument VAR is the variable name to which the input
          stream of the external program is bound (see
          'program-input-stream').  The Lisp process can write the
          program's input via this stream.

        * Remaining arguments have the same meaning as for the
          'execute-program' function.

     When control leaves the body, either normally or abnormally, the
     open stream is automatically closed and deleted.

     Value is the value of the last form of BODY.

 -- Macro: with-program-io (var program &optional arguments &key error
          if-error-exists) &body body
     Run an external program asynchronously and evaluate the body forms.

        * First argument VAR is the variable name to which a
          bidirectional input/output stream of the external program is
          bound.  The Lisp process can read/write the program's
          output/input via this stream.

        * Remaining arguments have the same meaning as for the
          'execute-program' function.

     When control leaves the body, either normally or abnormally, the
     open stream is automatically closed and deleted.

     Value is the value of the last form of BODY.

 -- Generic Function: program-input-stream self
     The input stream of an external program, or nil.

     Argument SELF is an an object representing the external program.

     The Lisp process can write to the program's input stream.

 -- Generic Function: program-output-stream self
     The output stream of an external program, or nil.

     Argument SELF is an an object representing the external program.

     The Lisp process can read from the program's output stream.

 -- Generic Function: program-error-stream self
     The error stream of an external program, or nil.

     Argument SELF is an an object representing the external program.

     The Lisp process can read from the program's error stream.

 -- Generic Function: program-exit-status self
     The exit value of an external program or the negative signal value,
     or nil.

     Argument SELF is an an object representing the external program.

 -- Function: close-program-streams self
     Close all streams of an external program.

     Argument SELF is an an object representing the external program.


File: rs-cll.info,  Node: Symbol Index,  Next: Concept Index,  Prev: Programming for the Real World,  Up: Top

Symbol Index
************

 [index ]
* Menu:

* (setf environment-variable):           Environment Variables.
                                                              (line  20)
* (setf program-arguments):              Program Arguments.   (line  27)
* (setf program-invocation-name):        Program Arguments.   (line  11)
* *random-string-alphabet*:              Strings.             (line   6)
* 2*pi:                                  Numerical Constants. (line  18)
* absolute-ascending:                    Sorting Numbers.     (line   6)
* absolute-descending:                   Sorting Numbers.     (line  11)
* addf:                                  Mathematical Operators.
                                                              (line  20)
* blank-char-p:                          Characters.          (line  11)
* bounding-indices-if:                   Sequences.           (line  46)
* bounding-indices-if-not:               Sequences.           (line  57)
* brent:                                 Optimization.        (line   6)
* cbrt:                                  Exponential Functions.
                                                              (line   6)
* close-program-streams:                 External Programs.   (line 156)
* cube:                                  Exponential Functions.
                                                              (line  24)
* cube-root:                             Exponential Functions.
                                                              (line  29)
* cubic-formula:                         Polynomials.         (line  43)
* cubic-formula-1:                       Polynomials.         (line  33)
* decimal-digits:                        Floating-Point Numbers.
                                                              (line  43)
* defconst:                              Data.                (line   6)
* defsubst:                              Data.                (line  12)
* degree-from-radian:                    Quantities.          (line  13)
* degree-from-sexagesimal:               Quantities.          (line  20)
* diagnostic-message:                    Diagnostic Messages. (line  15)
* die:                                   Diagnostic Messages. (line  41)
* divf:                                  Mathematical Operators.
                                                              (line  30)
* end-index-if:                          Sequences.           (line  26)
* end-index-if-not:                      Sequences.           (line  36)
* ensure-type:                           Conditions.          (line   6)
* environment-variable:                  Environment Variables.
                                                              (line  15)
* environment-variables:                 Environment Variables.
                                                              (line   6)
* evaluate-polynomial:                   Polynomials.         (line   6)
* execute-program:                       External Programs.   (line   6)
* exit-failure:                          Program Termination. (line   9)
* exit-success:                          Program Termination. (line   6)
* false:                                 Data.                (line  18)
* float-digits*:                         Floating-Point Numbers.
                                                              (line  22)
* float-epsilon:                         Floating-Point Numbers.
                                                              (line   6)
* float-negative-epsilon:                Floating-Point Numbers.
                                                              (line  14)
* float-precision*:                      Floating-Point Numbers.
                                                              (line  33)
* fma:                                   Mathematical Operators.
                                                              (line  37)
* fmaf:                                  Mathematical Operators.
                                                              (line  49)
* fsd:                                   Mathematical Operators.
                                                              (line  43)
* fsdf:                                  Mathematical Operators.
                                                              (line  53)
* get-working-directory:                 Working Directory.   (line   6)
* hypot:                                 Trigonometric Functions.
                                                              (line   6)
* hypot3:                                Trigonometric Functions.
                                                              (line  12)
* linear-index-from-subscripts:          Arrays.              (line   6)
* list-of-strings:                       Types.               (line  11)
* list-of-strings-p:                     Types.               (line   6)
* match-data:                            Regular Expressions. (line  41)
* match-end:                             Regular Expressions. (line  32)
* match-start:                           Regular Expressions. (line  23)
* match-string:                          Regular Expressions. (line  49)
* match-strings:                         Regular Expressions. (line  58)
* maxf:                                  Mathematical Operators.
                                                              (line  13)
* minf:                                  Mathematical Operators.
                                                              (line   9)
* mulf:                                  Mathematical Operators.
                                                              (line  27)
* nothing:                               Data.                (line  24)
* pi/2:                                  Numerical Constants. (line  14)
* pi/4:                                  Numerical Constants. (line  10)
* pi/6:                                  Numerical Constants. (line   6)
* program-arguments:                     Program Arguments.   (line  22)
* program-error-stream:                  External Programs.   (line 143)
* program-exit-status:                   External Programs.   (line 150)
* program-input-stream:                  External Programs.   (line 129)
* program-invocation-name:               Program Arguments.   (line   6)
* program-invocation-short-name:         Program Arguments.   (line  16)
* program-output-stream:                 External Programs.   (line 136)
* q-reader:                              Reader.              (line   6)
* quadratic-formula:                     Polynomials.         (line  24)
* quadratic-formula-1:                   Polynomials.         (line  15)
* radian-from-degree:                    Quantities.          (line   6)
* random-string:                         Strings.             (line  10)
* read-file:                             Streams.             (line   6)
* replace-match:                         Regular Expressions. (line  64)
* roman-numeral:                         Number Systems.      (line   6)
* save-match-data:                       Regular Expressions. (line  44)
* say:                                   Diagnostic Messages. (line  32)
* set-working-directory:                 Working Directory.   (line  13)
* sexagesimal-from-degree:               Quantities.          (line  36)
* square:                                Exponential Functions.
                                                              (line  11)
* square-root:                           Exponential Functions.
                                                              (line  16)
* standalone-program:                    Diagnostic Messages. (line  72)
* standalone-program-p:                  Diagnostic Messages. (line  69)
* standard-alpha-char-p:                 Characters.          (line  16)
* standard-digit-char-p:                 Characters.          (line  21)
* start-index-if:                        Sequences.           (line   6)
* start-index-if-not:                    Sequences.           (line  16)
* string-match:                          Regular Expressions. (line  10)
* subf:                                  Mathematical Operators.
                                                              (line  23)
* subscripts-from-linear-index:          Arrays.              (line  18)
* symbol-name*:                          Symbols.             (line   6)
* temporary-directory:                   Temporary Files and Directories.
                                                              (line  58)
* temporary-file:                        Temporary Files and Directories.
                                                              (line  31)
* temporary-file-name:                   Temporary Files and Directories.
                                                              (line   6)
* true:                                  Data.                (line  21)
* whitespace-char-p:                     Characters.          (line   6)
* with-input-from-program:               External Programs.   (line  77)
* with-output-to-program:                External Programs.   (line  95)
* with-program-io:                       External Programs.   (line 112)
* with-temporary-directory:              Temporary Files and Directories.
                                                              (line  66)
* with-temporary-file:                   Temporary Files and Directories.
                                                              (line  44)
* with-working-directory:                Working Directory.   (line  27)


File: rs-cll.info,  Node: Concept Index,  Prev: Symbol Index,  Up: Top

Concept Index
*************



Tag Table:
Node: Top630
Node: Introduction1307
Node: Basic Definitions1536
Node: Data1833
Ref: rs:defconst1950
Ref: rs:defsubst2158
Ref: rs:false2350
Ref: rs:true2429
Ref: rs:nothing2505
Node: Types2592
Ref: rs:list-of-strings-p2704
Ref: rs:list-of-strings2848
Node: Conditions2918
Ref: rs:ensure-type3043
Node: Symbols3175
Ref: rs:symbol-name*3296
Node: Numbers3747
Node: Numerical Constants3995
Ref: rs:pi/64158
Ref: rs:pi/44288
Ref: rs:pi/24421
Ref: rs:2*pi4550
Node: Mathematical Operators4678
Ref: rs:minf4903
Ref: rs:maxf5033
Ref: rs:addf5200
Ref: rs:subf5288
Ref: rs:mulf5440
Ref: rs:divf5533
Ref: rs:fma5714
Ref: rs:fsd5923
Ref: rs:fmaf6139
Ref: rs:fsdf6319
Node: Floating-Point Numbers6506
Ref: rs:float-epsilon6686
Ref: rs:float-negative-epsilon6933
Ref: rs:float-digits*7189
Ref: rs:float-precision*7588
Ref: rs:decimal-digits7977
Node: Sorting Numbers8168
Ref: rs:absolute-ascending8326
Ref: rs:absolute-descending8533
Node: Number Systems8745
Ref: rs:roman-numeral8870
Node: Quantities9108
Ref: rs:radian-from-degree9238
Ref: rs:degree-from-radian9436
Ref: rs:degree-from-sexagesimal9634
Ref: rs:sexagesimal-from-degree10236
Node: Characters10661
Ref: rs:whitespace-char-p10790
Ref: rs:blank-char-p10930
Ref: rs:standard-alpha-char-p11078
Ref: rs:standard-digit-char-p11231
Node: Arrays11558
Ref: rs:linear-index-from-subscripts11676
Ref: rs:subscripts-from-linear-index12148
Node: Strings12483
Ref: rs:*random-string-alphabet*12602
Ref: rs:random-string12729
Node: Sequences12807
Ref: rs:start-index-if12933
Ref: rs:start-index-if-not13296
Ref: rs:end-index-if13667
Ref: rs:end-index-if-not14027
Ref: rs:bounding-indices-if14395
Ref: rs:bounding-indices-if-not14806
Node: Streams15225
Ref: rs:read-file15346
Node: Reader16822
Ref: rs:q-reader16923
Node: Mathematics18017
Node: Trigonometric Functions18242
Ref: rs:hypot18420
Ref: rs:hypot318605
Node: Exponential Functions18799
Ref: rs:cbrt18974
Ref: rs:square19111
Ref: rs:square-root19250
Ref: rs:cube19471
Ref: rs:cube-root19608
Node: Optimization19954
Ref: rs:brent20099
Node: Polynomials21473
Ref: rs:evaluate-polynomial21586
Ref: rs:quadratic-formula-121905
Ref: rs:quadratic-formula22133
Ref: rs:cubic-formula-122369
Ref: rs:cubic-formula22647
Node: Miscellaneous22890
Node: Regular Expressions23069
Ref: rs:string-match23402
Ref: rs:match-start23865
Ref: rs:match-end24172
Ref: rs:match-data24476
Ref: rs:save-match-data24572
Ref: rs:match-string24724
Ref: rs:match-strings25027
Ref: rs:replace-match25228
Node: Programming for the Real World25491
Node: Environment Variables26042
Ref: rs:environment-variables26248
Ref: rs:environment-variable26509
Node: Program Arguments27067
Ref: rs:program-invocation-name27254
Ref: rs:program-invocation-short-name27520
Ref: rs:program-arguments27687
Node: Program Termination27924
Ref: rs:exit-success28113
Ref: rs:exit-failure28202
Node: Diagnostic Messages28289
Ref: rs:diagnostic-message28786
Ref: rs:say29504
Ref: rs:die29781
Ref: rs:standalone-program-p30585
Ref: rs:standalone-program30672
Node: Working Directory30762
Ref: rs:get-working-directory30959
Ref: rs:set-working-directory31136
Ref: rs:with-working-directory31660
Node: Temporary Files and Directories31820
Ref: rs:temporary-file-name32043
Ref: rs:temporary-file33342
Ref: rs:with-temporary-file33858
Ref: rs:temporary-directory34361
Ref: rs:with-temporary-directory34635
Node: External Programs35227
Ref: rs:execute-program35396
Ref: rs:with-input-from-program38920
Ref: rs:with-output-to-program39666
Ref: rs:with-program-io40393
Ref: rs:program-input-stream41091
Ref: rs:program-output-stream41329
Ref: rs:program-error-stream41571
Ref: rs:program-exit-status41810
Ref: rs:close-program-streams42015
Node: Symbol Index42175
Node: Concept Index51918

End Tag Table
